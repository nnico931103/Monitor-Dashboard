{"version":3,"file":"static/js/987.582bc350.chunk.js","mappings":"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","sources":["components/ChartComponent.tsx","components/ChartContainer.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport styled from \"styled-components\";\n\ninterface ChartComponentProps {\n  data: any[];\n  chartType: \"bar\" | \"line\" | \"area\" | \"scatter\" | \"radar\";\n  dataKey: string;\n  label: string;\n  width?: number;\n  height?: number;\n  maxValue?: number;\n}\n\nconst ChartWrapper = styled.div`\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  border-radius: 10px;\n  background-color: #fff;\n  text-align: center;\n  overflow: hidden;\n  max-width: 100%;\n`;\n\nconst ChartTitle = styled.h3`\n  margin-bottom: 10px;\n  font-size: 1.2rem;\n  color: #333;\n`;\n\nconst ChartComponent: React.FC<ChartComponentProps> = ({\n  data,\n  chartType,\n  dataKey,\n  label,\n  width = 700,\n  height = 350,\n  maxValue = Infinity,\n}) => {\n  const chartRef = useRef<SVGSVGElement | null>(null);\n  const [containerSize, setContainerSize] = useState({\n    width,\n    height,\n  });\n\n  const handleResize = () => {\n    if (chartRef.current?.parentElement) {\n      setContainerSize({\n        width: chartRef.current.parentElement.offsetWidth,\n        height: height,\n      });\n    }\n  };\n\n  useEffect(() => {\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    const svg = d3.select<SVGSVGElement, unknown>(chartRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const margin = { top: 20, right: 30, bottom: 50, left: 60 };\n    const chartWidth = containerSize.width - margin.left - margin.right;\n    const chartHeight = containerSize.height - margin.top - margin.bottom;\n\n    const g = svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    const colorScale = d3\n      .scaleSequential(d3.interpolateBlues)\n      .domain([0, d3.max(data, (d) => d[dataKey]) || 0]);\n\n    const average = d3.mean(data, (d) => d[dataKey]);\n\n    if (chartType === \"bar\") {\n      const x = d3\n        .scaleBand()\n        .range([0, chartWidth])\n        .domain(data.map((d) => d.name))\n        .padding(0.1);\n\n      const y = d3\n        .scaleLinear()\n        .range([chartHeight, 0])\n        .domain([0, d3.max(data, (d) => d[dataKey]) || 0])\n        .nice();\n\n      g.append(\"g\")\n        .attr(\"transform\", `translate(0,${chartHeight})`)\n        .call(d3.axisBottom(x))\n        .selectAll(\"text\")\n        .attr(\"transform\", \"rotate(-45)\")\n        .style(\"text-anchor\", \"end\")\n        .style(\"font-size\", chartWidth < 600 ? \"11px\" : \"12px\");\n\n      g.append(\"g\").call(d3.axisLeft(y));\n\n      g.selectAll(\".bar\")\n        .data(data)\n        .enter()\n        .append(\"rect\")\n        .attr(\"x\", (d) => x(d.name)!)\n        .attr(\"y\", (d) => y(d[dataKey]))\n        .attr(\"width\", x.bandwidth())\n        .attr(\"height\", (d) => chartHeight - y(d[dataKey]))\n        .attr(\"fill\", (d) =>\n          d[dataKey] > maxValue ? \"red\" : colorScale(d[dataKey])\n        )\n        .attr(\"opacity\", 0.9);\n\n      g.selectAll(\".text\")\n        .data(data)\n        .enter()\n        .append(\"text\")\n        .attr(\"class\", \"label\")\n        .attr(\"x\", (d) => x(d.name)! + x.bandwidth() / 2)\n        .attr(\"y\", (d) => y(d[dataKey]) - 5)\n        .attr(\"text-anchor\", \"middle\")\n        .style(\"font-size\", chartWidth < 600 ? \"11px\" : \"12px\")\n        .text((d) => d[dataKey]);\n\n      if (average !== undefined) {\n        g.append(\"line\")\n          .attr(\"x1\", 0)\n          .attr(\"x2\", chartWidth)\n          .attr(\"y1\", y(average))\n          .attr(\"y2\", y(average))\n          .attr(\"stroke\", \"green\")\n          .attr(\"stroke-width\", 2)\n          .attr(\"stroke-dasharray\", \"5,5\");\n      }\n    }\n\n    if (chartType === \"line\") {\n      const x = d3\n        .scalePoint()\n        .range([0, chartWidth])\n        .domain(data.map((d) => d.name));\n\n      const y = d3\n        .scaleLinear()\n        .range([chartHeight, 0])\n        .domain([0, d3.max(data, (d) => d[dataKey]) || 0])\n        .nice();\n\n      g.append(\"g\")\n        .attr(\"transform\", `translate(0,${chartHeight})`)\n        .call(d3.axisBottom(x))\n        .selectAll(\"text\")\n        .attr(\"transform\", \"rotate(-45)\")\n        .style(\"text-anchor\", \"end\")\n        .style(\"font-size\", chartWidth < 600 ? \"11px\" : \"12px\");\n\n      g.append(\"g\").call(d3.axisLeft(y));\n\n      const line = d3\n        .line()\n        .x((d) => x((d as any).name)!)\n        .y((d) => y((d as any)[dataKey]))\n        .curve(d3.curveMonotoneX);\n\n      g.append(\"path\")\n        .datum(data)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"#8884d8\")\n        .attr(\"stroke-width\", 2)\n        .attr(\"d\", line)\n        .attr(\"opacity\", 0.7);\n\n      g.selectAll(\".dot\")\n        .data(data)\n        .enter()\n        .append(\"circle\")\n        .attr(\"cx\", (d) => x(d.name)!)\n        .attr(\"cy\", (d) => y(d[dataKey]))\n        .attr(\"r\", 5)\n        .attr(\"fill\", (d) => (d[dataKey] > maxValue ? \"red\" : \"#8884d8\"));\n\n      if (average !== undefined) {\n        g.append(\"line\")\n          .attr(\"x1\", 0)\n          .attr(\"x2\", chartWidth)\n          .attr(\"y1\", y(average))\n          .attr(\"y2\", y(average))\n          .attr(\"stroke\", \"green\")\n          .attr(\"stroke-width\", 2)\n          .attr(\"stroke-dasharray\", \"5,5\");\n      }\n    }\n  }, [data, chartType, dataKey, label, containerSize, maxValue]);\n\n  return (\n    <ChartWrapper>\n      <ChartTitle>{label}</ChartTitle>\n      <svg\n        ref={chartRef}\n        width=\"100%\"\n        height={containerSize.height}\n        viewBox={`0 0 ${containerSize.width} ${containerSize.height}`}\n      />\n    </ChartWrapper>\n  );\n};\n\nexport default ChartComponent;\n","import React from \"react\";\nimport ChartComponent from \"./ChartComponent\";\nimport styled from \"styled-components\";\nimport { DeviceData } from \"../contexts/DeviceContext\";\n\ninterface ChartContainerProps {\n  deviceData: DeviceData[];\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  padding: 20px;\n  gap: 20px;\n`;\n\nconst Title = styled.h2`\n  text-align: center;\n  color: #333;\n  margin-bottom: 20px;\n`;\n\nconst ChartWrapper = styled.div`\n  min-width: 300px;\n  margin: 10px;\n  flex: 1 1 calc(50% - 40px);\n`;\n\nconst ChartContainer: React.FC<ChartContainerProps> = ({ deviceData }) => {\n  return (\n    <div>\n      <Container>\n        <ChartWrapper>\n          <ChartComponent\n            data={deviceData}\n            chartType=\"bar\"\n            dataKey=\"runtime\"\n            label=\"Runtime (hours)\"\n          />\n        </ChartWrapper>\n        <ChartWrapper>\n          <ChartComponent\n            data={deviceData}\n            chartType=\"line\"\n            dataKey=\"temperature\"\n            label=\"Temperature (°C)\"\n            maxValue={70}\n          />\n        </ChartWrapper>\n        <ChartWrapper>\n          <ChartComponent\n            data={deviceData}\n            chartType=\"bar\"\n            dataKey=\"power\"\n            label=\"Power Consumption (kWh)\"\n            maxValue={70}\n          />\n        </ChartWrapper>\n        <ChartWrapper>\n          <ChartComponent\n            data={deviceData}\n            chartType=\"line\"\n            dataKey=\"productionRate\"\n            label=\"Production Rate (%)\"\n          />\n        </ChartWrapper>\n        <ChartWrapper>\n          <ChartComponent\n            data={deviceData}\n            chartType=\"bar\"\n            dataKey=\"errorRate\"\n            label=\"Error Rate (%)\"\n            maxValue={5}\n          />\n        </ChartWrapper>\n      </Container>\n    </div>\n  );\n};\n\nexport default ChartContainer;\n"],"names":["ChartWrapper","styled","div","ChartTitle","h3","_ref","data","chartType","dataKey","label","width","height","maxValue","Infinity","chartRef","useRef","containerSize","setContainerSize","useState","handleResize","_chartRef$current","current","parentElement","offsetWidth","useEffect","window","addEventListener","removeEventListener","svg","d3","selectAll","remove","margin","chartWidth","chartHeight","g","append","attr","colorScale","domain","d","average","x","range","map","name","padding","y","nice","call","style","enter","bandwidth","text","undefined","line","curve","datum","_jsxs","children","_jsx","ref","viewBox","Container","h2","deviceData","ChartComponent"],"sourceRoot":""}